
#set variables for parallelization
rm(list = setdiff(ls(), c(lsf.str(), "jpath", "hpath", "os")))


source("/FILEPATH")
library(R.methodsS3, lib='/FILEPATH')
source('/FILEPATH/get_demographics.R')
source('/FILEPATH/get_population.R')
source('/FILEPATH/get_ids.R')
date <- gsub("-", "_", Sys.Date())

suppressMessages(sourceDirectory(paste0(jpath, "FILEPATH")))

code.dir <- paste0("/FILEPATH/")
scriptname <- paste0('csmr_split_launch_','2019_09_10',".R")
decomp_step = "iterative"


if (decomp_step=="step1"){
  demographics <- get_demographics(gbd_team="epi", gbd_round_id=6) 
} else {
  demographics <- get_demographics(gbd_team="epi", gbd_round_id=6)
}
locations <- unlist(demographics$location_id, use.names=F)

ages <- c(8:20, 30, 31, 32, 235)
years <- c(seq(1990,2019,5),2019)# c(1990,2000,2017)

loc_meta <- expand.grid(locs=locations)
write.csv(loc_meta, file = '/FILEPATH/loc_meta.csv')

#Pull population already ran - no need to re-run
pop <- data.frame(get_population(age_group_id=ages, location_id=locations, year_id=years, sex_id=c(1,2),
                                  status="best", decomp_step=decomp_step))
saveRDS(pop, file=paste0("/FILEPATH/pop_", date,".rds"))


threads <- 5
memory <- "700M"
time <- "00:15:00"
location_filepath <- '/FILEPATH/loc_meta.csv'
njobs <- nrow(loc_meta)
#for(i in 1:length(locations)){
  #Prepare qsub
  args <- paste(location_filepath)#paste(locations[i])
  rscript <- paste0("-s ", code.dir, paste0("FILEPATH/csmr_split_","gbd2019",".R")) #input date of best split code.
  rshell <- "/FILEPATH" #"FILEPATH" #
  #rshell <- "FILEPATH"
  errors <- " -o /FILEPATH -e /FILEPATH"
  #jobname <- paste0('splt', location)#paste0("splt_", locations[i])
  #sys.sub <- paste0("qsub -P proj_custom_models ", errors , " -N ", jobname, " ", "-pe multi_slot ", slots)
  sys.sub <- paste0("qsub -P proj_cvd ", errors , " -cwd -N splt -l fthread=", threads,
                    " -l m_mem_free=", memory, " -l h_rt=", time, " -q long.q -l archive=TRUE", ' -t 1:',njobs )
  command <- paste(sys.sub, rshell, rscript, args, date, decomp_step)
  print(command)
  #launch jobs
  system(command)
#}

